"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var json$1=require("@lezer/json"),language=require("@codemirror/language");const jsonParseLinter=()=>e=>{try{JSON.parse(e.state.doc.toString())}catch(n){if(!(n instanceof SyntaxError))throw n;const a=getErrorPosition(n,e.state.doc);return[{from:a,message:n.message,severity:"error",to:a}]}return[]};function getErrorPosition(e,n){let a;return(a=e.message.match(/at position (\d+)/))?Math.min(+a[1],n.length):(a=e.message.match(/at line (\d+) column (\d+)/))?Math.min(n.line(+a[1]).from+ +a[2]-1,n.length):0}const jsonLanguage=language.LRLanguage.define({name:"json",parser:json$1.parser.configure({props:[language.indentNodeProp.add({Object:language.continuedIndent({except:/^\s*\}/}),Array:language.continuedIndent({except:/^\s*\]/})}),language.foldNodeProp.add({"Object Array":language.foldInside})]}),languageData:{closeBrackets:{brackets:["[","{",'"']},indentOnInput:/^\s*[\}\]]$/}});function json(){return new language.LanguageSupport(jsonLanguage)}exports.json=json,exports.jsonLanguage=jsonLanguage,exports.jsonParseLinter=jsonParseLinter;